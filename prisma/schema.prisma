// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String    @default("USER")
  
  // Two-Factor Authentication
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  backupCodes      String? // JSON string of backup codes
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  socialAccounts SocialAccount[]
  posts         Post[]
  teams         TeamMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SocialAccount {
  id                String           @id @default(cuid())
  userId            String
  platform          String
  platformUserId    String
  platformUsername  String
  accessToken       String
  refreshToken      String?
  tokenExpiresAt    DateTime?
  isActive          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts             Post[]

  @@unique([userId, platform, platformUserId])
}

model Post {
  id              String        @id @default(cuid())
  userId          String
  socialAccountId String
  content         String
  mediaUrls       String?
  scheduledAt     DateTime?
  publishedAt     DateTime?
  status          String        @default("DRAFT")
  platform        String
  platformPostId  String?
  engagement      String?       // Store likes, shares, comments count as JSON string
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id], onDelete: Cascade)
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members     TeamMember[]
}

model TeamMember {
  id       String     @id @default(cuid())
  teamId   String
  userId   String
  role     String     @default("MEMBER")
  joinedAt DateTime   @default(now())

  team     Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

// Enums converted to String types for SQLite compatibility
// UserRole: "ADMIN" | "USER"
// SocialPlatform: "FACEBOOK" | "INSTAGRAM" | "TWITTER" | "LINKEDIN" | "TIKTOK" | "YOUTUBE" | "PINTEREST"
// PostStatus: "DRAFT" | "SCHEDULED" | "PUBLISHED" | "FAILED" | "CANCELLED"
// TeamRole: "OWNER" | "ADMIN" | "MEMBER"

model Lead {
  id                String        @id @default(cuid())
  
  // Personal Information
  firstName         String
  lastName          String
  email             String
  phone             String?
  company           String?
  website           String?
  
  // Business Information
  businessType      String
  industry          String
  teamSize          String
  currentSocialMedia String?
  
  // Requirements
  platforms         String        // JSON string of selected platforms
  postFrequency     String
  budget            String
  goals             String
  challenges        String?
  timeline          String
  
  // Additional Information
  currentTools      String?
  expectations      String?
  additionalInfo    String?
  
  // Marketing Preferences
  newsletter        Boolean       @default(false)
  updates           Boolean       @default(false)
  demo              Boolean       @default(false)
  
  // Lead Management
  status            String        @default("NEW")
  source            String        @default("LEAD_FORM")
  assignedTo        String?
  notes             String?
  
  // UTM Tracking
  utmSource         String?
  utmMedium         String?
  utmCampaign       String?
  utmTerm           String?
  utmContent        String?
  utmId             String?
  referrer          String?
  landingPage       String?
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model FormConfig {
  id                String        @id @default(cuid())
  name              String
  description       String?
  fields            String        // JSON string of form fields
  settings          String        // JSON string of form settings
  isActive          Boolean       @default(true)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  submissions       FormSubmission[]
}

model FormSubmission {
  id                String        @id @default(cuid())
  formConfigId      String
  data              String        // JSON string of submitted data
  utmSource         String?
  utmMedium         String?
  utmCampaign       String?
  utmTerm           String?
  utmContent        String?
  utmId             String?
  referrer          String?
  landingPage       String?
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime      @default(now())
  
  // Relations
  formConfig        FormConfig    @relation(fields: [formConfigId], references: [id], onDelete: Cascade)
}

// LeadStatus: "NEW" | "CONTACTED" | "QUALIFIED" | "PROPOSAL" | "NEGOTIATION" | "CLOSED_WON" | "CLOSED_LOST"